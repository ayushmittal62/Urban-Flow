<div align="center">

# 🚦 UrbanFlow
**Adaptive route intelligence for Narwana, Haryana**

Interactive shortest-path routing with live traffic simulation and real GPS-based visualization for 13 locations in Narwana town, Jind District.

![Status](https://img.shields.io/badge/status-active-brightgreen) ![Streamlit](https://img.shields.io/badge/Streamlit-1.32+-FF4B4B) ![Python](https://img.shields.io/badge/Python-3.10+-blue) ![License](https://img.shields.io/badge/license-Educational-blue)

</div>

---

## ✨ Key Features

| Area | Capability |
|------|------------|
| 🗺️ **Geographic Visualization** | **Real-world positioning using GPS coordinates (29.59°N, 76.11°E)** |
| Route Planning | Dijkstra's shortest path algorithm with O((V+E) log V) complexity |
| Dynamic Network | Add/remove locations and roads at runtime (in-memory editing) |
| Traffic Simulation | Adjust bidirectional edge weights (travel time in minutes) live |
| Multiple Layouts | 5 visualization modes: Geographic, Spring, Kamada-Kawai, Circular, Shell |
| Styling Controls | Edge colors, weight labels, width scaling, adjustable label sizes |
| Path Highlighting | Multi-layer glow effect on shortest path edges |
| Progress Feedback | Staged progress bar with simulated route computation steps |
| Metrics Dashboard | Route history, network statistics, modification tracking |
| Dark Theme | Custom dark UI with enhanced typography and visual hierarchy |

---

## 🗂 Project Structure

```
📦 UrbanFlow/
├── 📄 app.py                 # Main Streamlit application (645 lines)
│                              ├─ UI layout with custom CSS (3.2rem title)
│                              ├─ Geographic coordinate system (NARWANA_COORDINATES)
│                              ├─ 5 layout algorithms with adaptive scaling
│                              ├─ Interactive network editor (add/remove nodes/edges)
│                              └─ Route computation with staged progress bar
│
├── 📄 data_loader.py         # Base road network data (181 lines)
│                              ├─ get_road_network() - 13 locations, 29 connections
│                              ├─ get_locations() - sorted location list
│                              ├─ get_edge_list() - deduplicated edges
│                              └─ update_traffic_weight() - bidirectional updates
│
├── 📄 utils.py               # Pathfinding algorithms (153 lines)
│                              ├─ dijkstra_shortest_path() - O((V+E) log V)
│                              ├─ get_path_edges() - path to edge conversion
│                              └─ format_path_display() - UI formatting
│
├── 📄 requirements.txt       # Python dependencies (5 packages)
├── 📄 README.md              # This documentation
└── 📁 .streamlit/            # Streamlit configuration
    └── config.toml           # Theme settings
```

**Core Technologies:**
- **Frontend:** Streamlit 1.32+ (reactive UI framework)
- **Graph Library:** NetworkX 3.2+ (visualization only, not pathfinding)
- **Plotting:** Matplotlib 3.8+ with custom colormaps
- **Scientific:** SciPy 1.10+ for advanced layout algorithms
- **Numeric:** NumPy (implicit via dependencies) for coordinate transformations

---

## 🚀 Quick Start

### Installation

```bash
# Clone the repository
git clone https://github.com/ayushmittal62/Urban-Flow.git
cd Urban-Flow

# Install dependencies
pip install -r requirements.txt
```

### Running the Application

```bash
streamlit run app.py
```

The app will open in your browser at `http://localhost:8501` (or the next available port).

**System Requirements:**
- Python 3.10+ (tested on 3.12)
- 4GB RAM minimum
- Modern web browser (Chrome, Firefox, Edge)

**First Run:**
1. Wait for Streamlit to compile and start the server (~5-10 seconds)
2. The default network with 13 Narwana locations will load automatically
3. Geographic layout is set as the default visualization mode

---

## 🧭 Using UrbanFlow

1. Open the app – the default network loads into session state.
2. Choose a Source and Destination in the Route Planner.
3. Click “⚡ Step 1 · Compute Fastest Route” → a staged progress bar (buffering) shows internal steps.
4. View the styled result card (time + path + stop count).
5. Expand “Display Settings” to adjust visualization (layout, colors, widths, labels, node label size).
6. Click “🛠 Show Traffic & Network Editor” to:
   - Change existing road weights
   - Add / remove locations (nodes)
   - Add / update / remove roads (edges)
   - Clear all roads (danger) or restore defaults
7. Re‑compute a route to see the impact instantly.

### Buffering / Progress Simulation
The staged progress bar is purely UX (not actual heavy compute):

| Stage | Message | Purpose |
|-------|---------|---------|
| 0–20% | Initializing route engine... | Session setup & validation |
| 20–45% | Building graph structures... | Conceptual graph prep |
| 45–65% | Scanning edges & weights... | Emphasize network traversal |
| 65–85% | Exploring candidate paths... | Path exploration feel |
| 85–100% | Finalizing shortest path... | Wrap-up & display |

Want it faster? Reduce or remove the internal `time.sleep()` delays inside the compute block of `app.py`.

### Dynamic Locations
The route planner now reflects any new nodes you add during the session (no restart required). Nodes and edges persist only in-memory—reset restores the original baseline network from `data_loader.get_road_network()`.

---

## 🧱 Architecture Overview

### Data Representation
```
road_network: Dict[str, Dict[str, int]]  # adjacency list
```
Bidirectional updates keep weights symmetric when edited.

**Current Network:** Real locations from **Narwana, Haryana** (Jind District) including:
- **Transportation:** Railway Station, Bus Stand
- **Education:** Arya Senior Secondary School, S.D. Model School, K M College, S D Kanya Mahavidhlya
- **Healthcare:** Mittal Eye Hospital
- **Residential:** Patram Nagar, Kishan Chand Colony, Model Town, Birbal Nagar, Arya Up Nagar
- **Public Spaces:** Nehru Park

**Network Size:** 13 locations, 29 road connections  
**Travel Times:** Estimated 2-6 minutes between connected locations

📏 **Getting Accurate Distances:**  
For real driving times, use `fetch_distances.py` with Google Maps API key or measure manually using Google Maps. See `DISTANCE_MEASUREMENT_GUIDE.md` for instructions.

### Core Functions
File | Function | Responsibility
-----|----------|--------------
`data_loader.py` | `get_road_network()` | Returns baseline graph
`data_loader.py` | `get_edge_list()` | Deduplicated edge tuples
`data_loader.py` | `update_traffic_weight()` | Mutates weight both directions
`utils.py` | `dijkstra_shortest_path()` | Shortest path core
`utils.py` | `get_path_edges()` | Edge list for highlighting
`app.py` | `create_network_graph()` | Visualization with theming & effects

### Algorithm (Dijkstra)
Complexity: O((V + E) log V) with a binary heap.
Optimizations: early destination break, visited set, heap-based relaxation.

---

## 🎨 Visualization Enhancements
- **🗺️ Geographic layout** - Real-world positioning using GPS coordinates
- Gradient edge colors (Blues) scaled by weight
- Optional edge weight labels
- Edge width proportional to weight
- Multiple layout algorithms (geographic, spring, Kamada-Kawai, circular, shell)
- Highlight glow (two-layer edge drawing)
- Adjustable node label font size (slider)

**New: Geographic View** - Select "geographic" layout in Display Settings to see nodes positioned according to their actual locations in Narwana. See `GEOGRAPHIC_LAYOUT.md` for details.

---
## 🛠 Configuration & Customization
Area | How to Change
-----|---------------
Base theme | `.streamlit/config.toml`
Progress delays | Edit `time.sleep()` calls in compute section
Default graph | Modify `get_road_network()` in `data_loader.py`
Node label size default | Slider default in Display Settings
Edge styling rules | `create_network_graph()`

---

## 🗺 Roadmap
- [ ] Layout position caching per layout to avoid recompute
- [ ] Export graph (PNG / SVG) & route JSON
- [ ] Abbreviated label mode for dense graphs
- [ ] Alternative routes (Yen’s algorithm)
- [ ] Colorblind-friendly palette toggle
- [ ] Time-based traffic patterns (rush hours)
- [ ] Undo stack for editor actions

---

## 📦 Dependencies
See `requirements.txt`:
```
streamlit
networkx
matplotlib
```
Python 3.10+ recommended.

Optional (future): pandas, numpy, rich, pytest.

---

## 🤝 Contributing
Pull requests welcome. Please:
1. Keep functions small & typed.
2. Add / update tests for behavior changes.
3. Note UI/UX changes in the README if user-visible.

---

## 📄 License & Attribution
Educational / personal use. Credit “UrbanFlow – Ayush Mittal” in derivatives.

---

## 🙋 Support / Questions
Open an issue or reach out via:
- GitHub: https://github.com/ayushmittal62
- LinkedIn: https://www.linkedin.com/in/ayush-mittal629/

---

Made with ❤️ using Streamlit, NetworkX & Matplotlib.

© 2025 UrbanFlow · Created by Ayush Mittal
